{"version":3,"sources":["deck-with-mapbox-maps.js","App.tsx","serviceWorker.js","index.js"],"names":["DeckWithMapboxMaps","id","this","props","reuseMap","mapboxApiAccessToken","Component","initialViewState","longitude","latitude","zoom","pitch","bearing","MAPBOX_ACCESS_TOKEN","process","REACT_APP_MAPBOX_API_TOKEN","findLocation","searchText","resultCallback","searchUrl","fetch","then","res","json","lat","lon","bbox","zoomLevel","latMin","latMax","lngMin","latDiff","lngDiff","maxDiff","Math","pow","log","bboxToZoom","boundingbox","parseFloat","catch","err","console","error","App","handleKeyDown","e","keyCode","text","target","value","viewState","state","search","setState","searches","concat","_updateViewState","viewStateChangeObject","JSON","stringify","map","row","className","onClick","type","defaultValue","onKeyDown","controller","onViewStateChange","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8d707bb7.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {StaticMap} from 'react-map-gl';\n\nexport default class DeckWithMapboxMaps extends Component {\n  render() {\n\n    return (\n      <DeckGL id=\"json-deck\" {...this.props}>\n        <StaticMap\n          reuseMap\n          mapboxApiAccessToken={this.props.mapboxApiAccessToken}\n        />\n      </DeckGL>\n    );\n  }\n}\n\n","/* global process */\nimport React from \"react\";\n\nimport DeckWithMapboxMaps from \"./deck-with-mapbox-maps\";\nimport \"./App.css\";\n\n// Initial viewport settings\nconst initialViewState = {\n  longitude: -122.41669,\n  latitude: 37.7853,\n  zoom: 13,\n  pitch: 0,\n  bearing: 0\n};\n\nfunction bboxToZoom(bbox: any): Number {\n  let zoomLevel;\n  const [latMin, latMax, lngMin, lngMax] = bbox;\n  const latDiff = latMax - latMin;\n  const lngDiff = lngMax - lngMin;\n  const maxDiff = lngDiff > latDiff ? lngDiff : latDiff;\n  if (maxDiff < 360 / Math.pow(2, 20)) {\n    zoomLevel = 21;\n  } else {\n    zoomLevel =\n      -1 *\n      (Math.log(maxDiff) / Math.log(2) -\n        Math.log(360) / Math.log(2));\n    if (zoomLevel < 1) {\n      zoomLevel = 1;\n    }\n  }\n  return zoomLevel;\n}\n\n// Set your mapbox access token here\nconst MAPBOX_ACCESS_TOKEN = process.env.REACT_APP_MAPBOX_API_TOKEN;\nconst ENTER_KEY = 13;\n\nexport function findLocation(\n  searchText: String,\n  resultCallback: Function\n): void {\n  const searchUrl = `https://nominatim.openstreetmap.org/search/${searchText}?format=json`;\n  fetch(searchUrl)\n    .then(res => {\n      return res.json();\n    })\n    .then(res => {\n      const { lat, lon, boundingbox } = res[0];\n      const zoom = bboxToZoom(boundingbox);\n      debugger;\n      resultCallback({\n        latitude: parseFloat(lat),\n        longitude: parseFloat(lon),\n        zoom\n      });\n    })\n    .catch(err => {\n      resultCallback({});\n      console.error(err);\n    });\n}\n\ninterface ViewState {\n  latitude?: Number;\n  longitude?: Number;\n  zoom?: Number;\n  pitch?: Number;\n  bearing?: Number;\n  transitionDuration?: Number;\n  transitionInterpolator?: any;\n}\n\ninterface AppState {\n  searches: any[]; //replace any with suitable type\n  viewState: ViewState;\n}\n\nexport default class App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      viewState: {},\n      searches: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ viewState: initialViewState });\n  }\n\n  handleKeyDown = (e: any) => {\n    if (e.keyCode === ENTER_KEY) {\n      const text = e.target.value as String;\n      if (!text) {\n        return;\n      }\n      findLocation(text, (json: any) => {\n        const viewState = {\n          ...this.state.viewState,\n          latitude: json.latitude || 0,\n          longitude: json.longitude || 0,\n          zoom: json.zoom || 10\n        };\n        const search = { searchText: text, viewState };\n        this.setState({\n          searches: this.state.searches.concat(\n            search\n          ),\n          viewState: viewState\n        });\n      });\n    }\n  };\n\n  _updateViewState = (viewStateChangeObject: any) => {\n    const { viewState = null } = viewStateChangeObject;\n    const { latitude, longitude, bearing, pitch, zoom } = viewState;\n    this.setState({\n      viewState: { latitude, longitude, bearing, pitch, zoom }\n    });\n    return viewState;\n  };\n\n  render(): JSX.Element {\n    const { viewState } = this.state;\n    return (\n      <div id=\"app\">\n        <div id=\"sidebar-div\">\n          <h1 id=\"header\">\n            Viewport Finder\n          </h1>\n\n          <div>\n            <p id=\"help\">\n              Viewport for use\n              within mapping\n              applications\n            </p>\n            <div id=\"text-box\">\n              <p>\n                {JSON.stringify( viewState, null, \"    \")}\n              </p>\n            </div>\n          </div>\n\n          <div>\n            {this.state.searches.map(\n              row => {\n                return (\n                  <div\n                    className=\"searchlist\"\n                    onClick={e =>\n                      this._updateViewState(\n                        {\n                          viewState:\n                            row.viewState\n                        }\n                      )\n                    }\n                  >\n                    {\n                      row.searchText\n                    }\n                  </div>\n                );\n              }\n            )}\n          </div>\n\n          <div id=\"zoom-box\">\n            <label>\n              Zoom to region (OSM Nominatim)<br />\n              <input\n                type=\"text\"\n                defaultValue={\n                  \"\"\n                }\n                onKeyDown={\n                  this\n                    .handleKeyDown\n                }\n              ></input>\n            </label>\n          </div>\n        </div>\n        <div id=\"deck-container\">\n          <DeckWithMapboxMaps\n            id=\"json-deck\"\n            controller={true}\n            initialViewState={\n              this.state.viewState\n            }\n            viewState={this.state.viewState}\n            onViewStateChange={\n              this._updateViewState\n            }\n            mapboxApiAccessToken={\n              MAPBOX_ACCESS_TOKEN\n            }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}